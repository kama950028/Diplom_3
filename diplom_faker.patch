diff --git a/model/User.java b/model/User.java
--- a/model/User.java
+++ b/model/User.java
@@ -1,17 +1,30 @@
 package praktikum.tests.stellarburgers.model;

 

+import praktikum.tests.stellarburgers.util.Data;

 

-public class User {

-    public String email;

-    public String password;

-    public String name;

+/** Иммутабельная модель пользователя + фабрики */

+public final class User {

+    public final String email;

+    public final String password;

+    public final String name;

 

     public User(String email, String password, String name) {

-        this.email = email; this.password = password; this.name = name;

+        this.email = email;

+        this.password = password;

+        this.name = name;

     }

 

+    /** Удобная фабрика */

     public static User of(String email, String password, String name) {

         return new User(email, password, name);

     }

+

+    /** Быстрая генерация рандомного пользователя через Faker */

+    public static User random() {

+        return new User(

+                Data.email(),

+                Data.pass(),

+                Data.name()

+        );

+    }

 }

-


diff --git a/pages/ProfilePage.java b/pages/ProfilePage.java
--- a/pages/ProfilePage.java
+++ b/pages/ProfilePage.java
@@ -1,15 +1,36 @@
 package praktikum.tests.stellarburgers.pages;

 

+import io.qameta.allure.Step;

 import org.openqa.selenium.By;

 import org.openqa.selenium.WebDriver;

+import org.openqa.selenium.WebElement;

+import org.openqa.selenium.support.ui.ExpectedConditions;

+import org.openqa.selenium.support.ui.WebDriverWait;

+

+import java.time.Duration;

 

 public class ProfilePage {

     private final WebDriver driver;

+    private final WebDriverWait wait;

+

     private final By profileHeader = By.xpath("//*[text()='Профиль' or normalize-space(text())='Личный Кабинет']");

+    private final By logoutBtn     = By.xpath("//button[normalize-space(text())='Выход']");

+    private final By loginBtn      = By.xpath("//button[normalize-space(text())='Войти']");

 

-    public ProfilePage(WebDriver driver) { this.driver = driver; }

+    public ProfilePage(WebDriver driver) {

+        this.driver = driver;

+        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));

+    }

 

     public boolean isOpened() {

         return !driver.findElements(profileHeader).isEmpty();

     }

+

+    @Step("Выходим из профиля")

+    public void logout() {

+        WebElement btn = wait.until(ExpectedConditions.elementToBeClickable(logoutBtn));

+        btn.click();

+        // Проверяем, что вернулись к состоянию неавторизованного пользователя (появилась кнопка «Войти»)

+        wait.until(ExpectedConditions.visibilityOfElementLocated(loginBtn));

+    }

 }


diff --git a/tests/LoginTests.java b/tests/LoginTests.java
--- a/tests/LoginTests.java
+++ b/tests/LoginTests.java
@@ -2,76 +2,85 @@
 

 import io.qameta.allure.Description;

 import io.qameta.allure.Story;

+import org.junit.Before;

 import org.junit.Test;

 import org.junit.runner.RunWith;

 import praktikum.tests.stellarburgers.BaseUiTest;

 import praktikum.tests.stellarburgers.infra.BrowserSuite;

 import praktikum.tests.stellarburgers.infra.Browsers;

+import praktikum.tests.stellarburgers.model.User;

 import praktikum.tests.stellarburgers.pages.*;

 

-import static org.junit.Assert.assertTrue;

-

 /**

- * Для успешных логинов нужны валидные тест-учётки.

- * Поменяй email/password на действительные данные.

+ * Полностью UI-подход:

+ * 1) В @Before создаём пользователя через UI (Faker-данные).

+ * 2) Выходим из аккаунта.

+ * 3) В тестах логинимся уже готовыми данными.

  */

 @RunWith(BrowserSuite.class)

 @Browsers({"chrome", "yandex"})

 public class LoginTests extends BaseUiTest {

 

-    private final String EXISTING_EMAIL = "test@example.com";

-    private final String EXISTING_PASS  = "qwerty1";

+    private User user;

 

-    @Test

-    @Story("Вход: кнопка «Войти в аккаунт» на главной")

-    @Description("Переход с главной и успешный логин")

-    public void loginFromMainTest() {

+    @Before

+    public void createUserViaUI() {

+        // 1) Генерим пользователя через Faker

+        user = User.random();

+

+        // 2) Регистрируем через UI

         openMain();

         MainPage main = new MainPage(driver);

         main.clickLoginMain();

 

         LoginPage login = new LoginPage(driver);

-        login.login(EXISTING_EMAIL, EXISTING_PASS);

+        login.goRegister();

 

+        RegisterPage reg = new RegisterPage(driver);

+        reg.register(user.name, user.email, user.password);

+

+        // 3) Убеждаемся, что попали в профиль, и выходим — чтобы тестировать логин

         main.clickProfile();

-        assertTrue(new ProfilePage(driver).isOpened());

+        ProfilePage profile = new ProfilePage(driver);

+        if (!profile.isOpened()) {

+            throw new AssertionError("Профиль не открылся после регистрации");

+        }

+        profile.logout();

+

+        // вернулись в неавторизованное состояние

+        openMain();

     }

 

     @Test

-    @Story("Вход: через «Личный кабинет»")

-    public void loginFromProfileLinkTest() {

-        openMain();

+    @Story("Вход: кнопка «Войти в аккаунт» на главной")

+    @Description("Проверяем логин с главной страницы по кнопке «Войти в аккаунт»")

+    public void loginFromMainButtonTest() {

         MainPage main = new MainPage(driver);

-        main.clickProfile();

+        main.clickLoginMain();

 

         LoginPage login = new LoginPage(driver);

-        login.login(EXISTING_EMAIL, EXISTING_PASS);

+        login.login(user.email, user.password);

 

         main.clickProfile();

-        assertTrue(new ProfilePage(driver).isOpened());

+        org.junit.Assert.assertTrue(new ProfilePage(driver).isOpened());

     }

 

     @Test

-    @Story("Вход: кнопка в форме регистрации")

-    public void loginFromRegisterFormTest() {

-        openMain();

+    @Story("Вход: через «Личный Кабинет»")

+    public void loginFromProfileLinkTest() {

         MainPage main = new MainPage(driver);

-        main.clickLoginMain();

+        main.clickProfile(); // в неавторизованном состоянии ведёт на форму логина

+

         LoginPage login = new LoginPage(driver);

-        login.goRegister();

+        login.login(user.email, user.password);

 

-        // Вернуться на логин с формы регистрации ссылкой «Войти»

-        driver.navigate().back(); // если на вашей версии есть явная ссылка — можно кликнуть по ней

-

-        login.login(EXISTING_EMAIL, EXISTING_PASS);

         main.clickProfile();

-        assertTrue(new ProfilePage(driver).isOpened());

+        org.junit.Assert.assertTrue(new ProfilePage(driver).isOpened());

     }

 

     @Test

-    @Story("Вход: кнопка в форме восстановления пароля")

-    public void loginFromRestoreFormTest() {

-        openMain();

+    @Story("Вход: через «Восстановление пароля» -> «Войти»")

+    public void loginFromRestoreFlowTest() {

         MainPage main = new MainPage(driver);

         main.clickLoginMain();

 

@@ -81,8 +90,8 @@
         RestorePage restore = new RestorePage(driver);

         restore.goLogin();

 

-        login.login(EXISTING_EMAIL, EXISTING_PASS);

+        login.login(user.email, user.password);

         main.clickProfile();

-        assertTrue(new ProfilePage(driver).isOpened());

+        org.junit.Assert.assertTrue(new ProfilePage(driver).isOpened());

     }

 }


diff --git a/tests/RegisterTests.java b/tests/RegisterTests.java
--- a/tests/RegisterTests.java
+++ b/tests/RegisterTests.java
@@ -4,27 +4,25 @@
 import io.qameta.allure.Story;

 import org.junit.Test;

 import org.junit.runner.RunWith;

-import org.openqa.selenium.By;

 import praktikum.tests.stellarburgers.BaseUiTest;

 import praktikum.tests.stellarburgers.infra.BrowserSuite;

 import praktikum.tests.stellarburgers.infra.Browsers;

+import praktikum.tests.stellarburgers.model.User;

 import praktikum.tests.stellarburgers.pages.*;

+import praktikum.tests.stellarburgers.util.Data;

 

 import static org.junit.Assert.assertTrue;

-

 

 @RunWith(BrowserSuite.class)

 @Browsers({"chrome", "yandex"})

 public class RegisterTests extends BaseUiTest {

 

-    private String uniqueEmail() {

-        return "auto+" + System.currentTimeMillis() + "@example.com";

-    }

-

     @Test

     @Story("Регистрация: успешная")

-    @Description("Регистрация с валидным паролем (>= 6 символов) с развилкой: редирект на логин или сразу на главную")

+    @Description("Регистрируемся с валидными полями (Faker)")

     public void successRegistrationTest() {

+        User u = User.random();

+

         openMain();

         MainPage main = new MainPage(driver);

         main.clickLoginMain();

@@ -33,22 +31,7 @@
         login.goRegister();

 

         RegisterPage reg = new RegisterPage(driver);

-        String email = uniqueEmail();

-        String pass = "qwerty1";

-        reg.register("Auto Tester", email, pass);

-

-        // Ждём ИЛИ логин-форму, ИЛИ уже главную (после авто-логина)

-        boolean onLoginPage  = !driver.findElements(By.xpath("//button[normalize-space(text())='Войти']")).isEmpty();

-        boolean onMainPage   = !driver.findElements(By.xpath("//p[normalize-space(text())='Личный Кабинет']")).isEmpty();

-

-        if (onLoginPage) {

-            new LoginPage(driver).login(email, pass);

-        } else if (!onMainPage) {

-            // небольшая подстраховка (короткое ожидание)

-            try { Thread.sleep(800); } catch (InterruptedException ignored) {}

-            onLoginPage = !driver.findElements(By.xpath("//button[normalize-space(text())='Войти']")).isEmpty();

-            if (onLoginPage) new LoginPage(driver).login(email, pass);

-        }

+        reg.register(u.name, u.email, u.password);

 

         main.clickProfile();

         assertTrue(new ProfilePage(driver).isOpened());

@@ -65,7 +48,7 @@
         login.goRegister();

 

         RegisterPage reg = new RegisterPage(driver);

-        reg.register("Auto Tester", uniqueEmail(), "123"); // слишком короткий

+        reg.register("Auto Tester", Data.email(), "123"); // намеренно короткий пароль

         assertTrue("Ожидали подсветку/текст ошибки пароля", reg.isPasswordErrorShown());

     }

 }
